Sorting Algorithms:
- Selection Sort
- Insertion Sort
- Bubble Sort
- Merge Sort

- Selection Sort
    - Find minimum element and move to correct position

    - Always O(n²) comparisons

    - Memory efficient (in-place)

- Insertion Sort
    - Insert elements into correct position one-by-one
    - Best for nearly sorted arrays: O(n)
    - Worst case: O(n²)

- Bubble Sort
    - Repeatedly swap adjacent elements if in wrong order
    - Best case (sorted already): O(n)
    - Worst case: O(n²)

- Merge Sort
    - Divide-and-Conquer algorithm
    - Divide → Sort → Merge
    - Time: O(n log n) always
    - Extra memory needed
    - Very efficient for large datasets


Summary
-----------------------------------------------------------------------------------------------------
Sorting Algorithm	     Best Time	     Worst Time	     Space	          Notes
-----------------------------------------------------------------------------------------------------
Selection Sort	         O(n²)	         O(n²)	         In-place	      Easy but slow
Insertion Sort	         O(n)	         O(n²)	         In-place	      Fast if nearly sorted
Bubble Sort	             O(n)	         O(n²)	         In-place	      Simple but bad performance
Merge Sort	             O(nlogn)	     O(nlogn)	     Extra Space	  Most efficient here
-----------------------------------------------------------------------------------------------------