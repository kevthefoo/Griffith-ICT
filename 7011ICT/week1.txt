=====================================================================================================
How fast is an algorithm?
- Low memory usage? =====> Space Efficiency
- Small amount of time measured on a stopwatch? =====> Time Efficiency

=====================================================================================================
How to describe the running time of an algorithm increase when input is getting bigger?
- Constant Running Time
- Linear Running Time
- Quadratic Running Time

-----------------------------------------------------------------------------------------------
Name	             Time Complexity	Example Pattern	    Feels Like...
-----------------------------------------------------------------------------------------------
Constant Time	     O(1)	            Single operation	Super fast, doesn't care about size
Linear Time	         O(n)	            Single loop	        Slow and steady
Quadratic Time	     O(n²)	            Nested loops	    Disaster for big input
-----------------------------------------------------------------------------------------------

=====================================================================================================
Analysis of algorithm Efficiency
- Running time and theoretical analysis
- Big-O notation

Best-case & average-case & worst-case?
Let’s say you're searching for your lost sock in a drawer:

- Best-case: First item you check is the sock.

- Average-case: You find it halfway through.

- Worst-case: Sock is the last item. Or worse... it’s in the laundry.

Note: Big-O usually looks at the worst-case to prepare for doomsday.

-------------------------------------------------------------------------------------------------------------------
Case	       Definition	                 Example of Searching for X in Array	Time Complexity (Linear Search)
-------------------------------------------------------------------------------------------------------------------
Best-case	   Ideal input → super fast	     X is the first element	                O(1)
Average-case   Random input → normal speed	 X is somewhere in the middle	        O(n)
Worst-case	   Terrible input → super slow	 X is not in the array / last element	O(n)
-------------------------------------------------------------------------------------------------------------------

=====================================================================================================

What is recursion?
- Recursion is when a function calls itself to solve a smaller version of the original problem.

Types of Recursion:
- Direct Recursion
- Indirect Recursion

Direct Recursion:
- When a function calls itself directly.


Indirect Recursion
- When a function calls another function, and that other function calls the first one back.

-------------------------------------------------------------------------------------------------------------------
Type of Recursion	     How It Works	                     Example	                 Real-life analogy
-------------------------------------------------------------------------------------------------------------------
Direct Recursion	     Function calls itself	             countdown(n)	             "I'll do it myself."
Indirect Recursion	     Function A calls B, B calls A	     is_even(n) & is_odd(n)	     "Let me ask my friend."
-------------------------------------------------------------------------------------------------------------------

=====================================================================================================

-------------------------------------
Basic Asymptotic Efficiency Classes:
-------------------------------------
Class	       Name  
O(1)	       Constant 
O(logn)	   Logarithmic	
O(n)	       Linear
O(nlogn)	   Linearithmic
O(n²)	       Quadratic	
O(2ⁿ)	       Exponential
O(n!)	       Factorial
-------------------------------------

Who is faster?
O(1)  <  O(logn)  <  O(n)  <  O(nlogn)  <  O(n²)  <  O(2ⁿ)  <  O(n!)

Simple rule:
If your algorithm is O(1) or O(log n) → You're chilling.
If it's O(n) or O(n log n) → Acceptable for most problems.
If it's O(n²) → Okay for small input, but scary for big input.
If it's O(2ⁿ) or O(n!) → Good luck... or better get creative.

=====================================================================================================